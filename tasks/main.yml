---
# tasks file for compile_grass

- name: 'Ensure that the "builder" user account has been defined'
  assert:
    that: 'gsi_builder_username != ""'
    msg: 'You must define a builder user account. Set `gsi_builder_username` in the playbook file or provide its value via --extra-vars'

- name: 'Get list of existing users'
  getent:
    database: passwd

- name: 'Install sudo'
  apt:
    name: 'sudo'
  become: true

- name: 'Create "builder" user account'
  user:
    name: '{{ gsi_builder_username }}'
    groups: 'sudo'
    append: true
    shell: '{{ gsi_builder_shell }}'
    state: 'present'
    password: '{{ gsi_builder_password }}'
    update_password: 'on_create'
  when: gsi_builder_username not in ansible_facts.getent_passwd
  become: true

- name: 'Create the build directory and ensure our "builder" account has write permissions'
  file:
    path: '{{ gsi_build_dir }}'
    state: 'directory'
    owner: '{{ gsi_builder_username }}'
    group: '{{ gsi_builder_username }}'
    mode: '0755'
  become: true

- name: 'Add the signing key for xpra'
  apt_key:
    url: 'https://xpra.org/gpg.asc'
    state: 'present'
  when: gsi_setup_xpra|bool == true
  become: true

- name: 'Add the repository for xpra'
  apt_repository:
    repo: 'deb https://xpra.org/ bionic main'
    state: present
  when: gsi_setup_xpra|bool == true
  become: true

- name: 'Install xpra'
  apt:
    name: 'xpra'
    update_cache: true
  when: gsi_setup_xpra|bool == true
  become: true

- name: 'Enable & start xpra service'
  service:
    name: 'xpra'
    state: 'started'
    enabled: true
  when: gsi_setup_xpra|bool == true
  become: true

- name: 'Install prerequisites'
  apt:
    name:
      - 'build-essential'
      - 'autoconf2.13'
      - 'autotools-dev'
      - 'debhelper'
      - 'fakeroot'
      - 'flex'
      - 'make'
      - 'bison'
      - 'gcc'
      - 'libgcc1'
      - 'g++'
      - 'cmake'
      - 'ccache'
      - 'python'
      - 'python-dev'
      - 'python-opengl'
      - 'python-wxversion'
      - 'python-wxtools'
      - 'python-wxgtk3.0'
      - 'python-dateutil'
      - 'python-dateutil'
      - 'python-numpy'
      - 'libgsl-dev'
      - 'libjpeg-dev'
      - 'libpng-dev'
      - 'libpnglite-dev'
      - 'libtiff-dev'
      - 'libtiff5-dev'
      - 'libreadline-dev'
      - 'dpatch'
      - 'libatlas-base-dev'
      - 'wx3.0-headers'
      - 'wx-common'
      - 'libwxgtk3.0-dev'
      - 'libwxbase3.0-dev'
      - 'libncurses5-dev'
      - 'zlib1g-dev'
      - 'gettext'
      - 'sqlite3'
      - 'libsqlite3-dev'
      - 'libpq-dev'
      - 'libreadline7'
      - 'libboost-thread-dev'
      - 'libboost-program-options-dev'
      - 'subversion'
      - 'wget'
      # This package seems not to exist any more?
      # Maybe we need ffmpeg instead?
      # Should we directly install the deb package?
      # https://launchpad.net/ubuntu/bionic/amd64/libav-tools/7:3.3.4-2
      # - 'libav-tools'
      - 'libavutil-dev'
      - 'ffmpeg2theora'
      - 'libffmpegthumbnailer-dev'
      - 'libavcodec-dev'
      - 'libavformat-dev'
      - 'libswscale-dev'
      - 'checkinstall'
      - 'libglu1-mesa-dev'
      - 'libxmu-dev'
      - 'ghostscript'
  become: true

- name: 'Install BLAS development files'
  apt:
    name:
      - 'libblas-dev'
  when: gsi_blas_support| bool == true

- name: 'Install bzip2 development files'
  apt:
    name:
      - 'libbz2-dev'
  when: gsi_bzip2_support| bool == true

- name: 'Install cairo development files'
  apt:
    name:
      - 'libcairo2-dev'
  when: gsi_cairo_support| bool == true

- name: 'Install fftw3 development files'
  apt:
    name:
      - 'libfftw3-dev'
  when: gsi_fftw_support| bool == true

- name: 'Install freetype development files'
  apt:
    name:
      - 'libfreetype6-dev'
  when: gsi_freetype_support| bool == true

- name: 'Install the pre-compiled dev-packages for GDAL'
  apt:
    name:
      - 'libgdal-dev'
      - 'python-gdal'
      - 'gdal-bin'
  become: true
  when: (gsi_gdal_support| bool == true) and (gsi_precompiled_gdal|bool == true)

- name: 'Install the pre-compiled dev-packages for GEOS'
  apt:
    name:
      - 'libgeos-dev'
  become: true
  when: (gsi_geos_support| bool == true) and (gsi_precompiled_geos|bool == true)

- name: 'Install lapack development files'
  apt:
    name:
      - 'liblapack-dev'
  become: true
  when: gsi_lapack_support|bool == true

- name: 'Install liblas development files'
  apt:
    name:
      - 'liblas-c-dev'
  become: true
  when: gsi_liblas_support|bool == true

- name: 'Install MySQL development files'
  apt:
    name:
      - 'libmysqlclient-dev'
  when: gsi_mysql_support| bool == true

- name: 'Install netcdf development files'
  apt:
    name:
      - 'libnetcdf-dev'
      - 'netcdf-bin'
  become: true
  when: gsi_netcdf_support|bool == true

- name: 'Install odbc development files'
  apt:
    name:
      - 'unixodbc-dev'
  become: true
  when: gsi_odbc_support|bool == true

- name: 'Install OpenCL development files'
  apt:
    name:
      - 'opencl-headers'
      - 'ocl-icd-libopencl1'
  when: gsi_opencl_support| bool == true

- name: 'Install the pre-compiled dev packages for PDAL'
  apt:
    name:
      - 'libpdal-dev'
      - 'libpdal-plugin-python'
      - 'pdal'
  become: true
  when: gsi_precompiled_pdal|bool == true

- name: 'Install the pre-compiled dev-packages for PROJ.4'
  apt:
    name:
      - 'proj-bin'
      - 'proj-data'
      - 'libproj-dev'
  become: true
  when: gsi_precompiled_proj|bool == true

- name: 'Install zstd development files'
  apt:
    name:
      - 'libzstd-dev'
  when: gsi_zstd_support| bool == true

- name: 'Check out GRASS source code'
  subversion:
    repo: 'https://svn.osgeo.org/grass/grass/trunk'
    dest: '{{ gsi_build_dir }}/grass/'
  become_user: '{{ gsi_builder_username }}'
  become: true

- name: 'Create the grass configuration script'
  template:
    src: 'configure_grass.sh.j2'
    dest: '{{ gsi_build_dir }}/grass/configure_grass.sh'
    owner: '{{ gsi_builder_username }}'
    group: '{{ gsi_builder_username }}'
    mode: '0744'
  become: true

- name: 'Configure GRASS from source'
  command: '{{ gsi_build_dir }}/grass/configure_grass.sh'
  changed_when: false
  become_user: '{{ gsi_builder_username }}'
  become: true

- name: 'Cleanup output of previous compilations 1/2'
  command: 'make cleandistdirs'
  args:
    chdir: '{{ gsi_build_dir }}/grass/'
  changed_when: false
  become: true

- name: 'Cleanup output of previous compilations 2/2'
  file:
    state: absent
    path: '{{ gsi_build_dir }}/grass/compilation_output.txt'
  changed_when: false
  become: true

- name: 'Compile GRASS from source'
  tags:
    - skip_ansible_lint
  # We need to use shell redirection because the output of the compilation, exceeds
  # the travis log size.
  shell: 'make -j{{ ansible_processor_vcpus }} > compilation_output.txt 2>&1'
  args:
    chdir: '{{ gsi_build_dir }}/grass/'
    creates: 'bin.x86_64-pc-linux-gnu/grass*'
  # We need to ignore errors, because on trunk some grass module might be broken.
  # Nevertheless, the grass binary should usually still be in a working state
  changed_when: false
  ignore_errors: true
  # Compilation should be done as a normal user
  become_user: '{{ gsi_builder_username }}'
  become: true

- name: 'Ensure that grass was actually compiled.'
  stat:
    path: '{{ gsi_build_dir }}/grass/bin.x86_64-pc-linux-gnu/grass*'
  become: true
